# 🚀 TypeScript Backend Docker Compose
version: '3.8'

services:
  # NestJS Backend
  ts-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recipe-ai-ts-backend
    ports:
      - "8081:8081"  # REST API
      - "8083:8083"  # WebSocket
    environment:
      # 서버 설정
      NODE_ENV: production
      PORT: 8081
      WEBSOCKET_PORT: 8083
      
      # 데이터베이스 (NAS IP로 수정 필요)
      MONGODB_URI: mongodb://recipe_admin:RecipeDB_2024_Secure%239x7!@192.168.0.111:27017/recipe_ai_db
      ELASTICSEARCH_URL: http://192.168.0.111:9200
      REDIS_URL: redis://:RecipeAI2024!@192.168.0.111:6379
      
      # AI 서비스 (NAS에서 Ollama 실행 시)
      OLLAMA_URL: http://192.168.0.111:11434
      OLLAMA_MODEL: gemma2:2b
      
      # 보안
      JWT_SECRET: recipe-ai-ultra-secure-key-2024!@#$
      JWT_EXPIRES_IN: 7d
    
    volumes:
      # 로그 저장 (NAS 경로로 수정)
      - ./logs:/app/logs
      
    restart: unless-stopped
    
    # 네트워크 설정
    networks:
      - recipe-ai-network
    
    # 의존성 체크 (외부 서비스 대기)
    depends_on:
      - wait-for-services
    
    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 외부 서비스 대기용
  wait-for-services:
    image: busybox:1.35
    container_name: wait-for-services
    command: |
      sh -c "
        echo '⏳ 외부 서비스 연결 대기 중...'
        
        # MongoDB 대기
        until nc -z 192.168.0.111 27017; do
          echo '📊 MongoDB 연결 대기...'
          sleep 2
        done
        echo '✅ MongoDB 연결 확인'
        
        # Redis 대기  
        until nc -z 192.168.0.111 6379; do
          echo '🔄 Redis 연결 대기...'
          sleep 2
        done
        echo '✅ Redis 연결 확인'
        
        # Elasticsearch 대기
        until nc -z 192.168.0.111 9200; do
          echo '🔍 Elasticsearch 연결 대기...'
          sleep 2
        done
        echo '✅ Elasticsearch 연결 확인'
        
        echo '🚀 모든 서비스 준비 완료!'
      "
    networks:
      - recipe-ai-network

networks:
  recipe-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# Docker Compose 사용법:
# docker-compose up -d          # 백그라운드 실행
# docker-compose logs -f        # 로그 실시간 확인
# docker-compose down           # 종료
# docker-compose restart        # 재시작
